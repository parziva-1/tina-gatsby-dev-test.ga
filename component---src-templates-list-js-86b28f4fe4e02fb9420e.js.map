{"version":3,"sources":["webpack:///./src/components/useAuthors.js","webpack:///./src/components/authors.js","webpack:///./src/templates/list.js"],"names":["useAuthors","settingsJson","authors","ListAuthors","authorIDs","filter","author","find","id","map","index","length","name","AuthorsForm","label","fields","component","itemProps","item","key","defaultItem","Math","random","toString","substr","email","link","parse","value","List","data","pageContext","page","useLocalJsonForm","ListForm","slug","numPages","limit","skip","currentPage","isFirst","isLast","prevPage","nextPage","title","posts","edges","article","node","frontmatter","draft","to","path","excerpt","date","ListNav","rel","pageQuery","styled","div","filename","uploadDir","previewSrc","formValues","jsonNode","hero","image","childImageSharp","fluid","src"],"mappings":"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","file":"component---src-templates-list-js-86b28f4fe4e02fb9420e.js","sourcesContent":["import { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nexport const useAuthors = () => {\r\n  const { settingsJson } = useStaticQuery(\r\n    graphql`\r\n      query authorsQuery {\r\n        settingsJson(\r\n          fileRelativePath: { eq: \"/content/settings/authors.json\" }\r\n        ) {\r\n          ...authors\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  return settingsJson.authors\r\n}\r\n\r\nexport const authorsFragment = graphql`\r\n  fragment authors on SettingsJson {\r\n    authors {\r\n      email\r\n      name\r\n      id\r\n      link\r\n    }\r\n  }\r\n`\r\n","import { useAuthors } from \"./useAuthors\"\r\n\r\nexport const ListAuthors = ({ authorIDs }) => {\r\n  const authors = useAuthors().filter(author =>\r\n    authorIDs.find(id => id === author.id)\r\n  )\r\n\r\n  const authorList = authors.map((author, index) => {\r\n    if (authors.length === index + 1) {\r\n      return author.name\r\n    } else {\r\n      return author.name + \", \"\r\n    }\r\n  })\r\n\r\n  return authorList\r\n}\r\n\r\nexport const AuthorsForm = {\r\n  label: \"Authors\",\r\n  fields: [\r\n    {\r\n      label: \"Authors\",\r\n      name: \"rawJson.authors\",\r\n      component: \"group-list\",\r\n      itemProps: item => ({\r\n        key: item.id,\r\n        label: item.name,\r\n      }),\r\n      defaultItem: () => ({\r\n        name: \"New Author\",\r\n        id: Math.random()\r\n          .toString(36)\r\n          .substr(2, 9),\r\n        email: \"\",\r\n        link: \"\",\r\n      }),\r\n      fields: [\r\n        {\r\n          label: \"Name\",\r\n          name: \"name\",\r\n          component: \"text\",\r\n          parse(value) {\r\n            return value || \"\"\r\n          },\r\n        },\r\n        {\r\n          label: \"Email\",\r\n          name: \"email\",\r\n          component: \"text\",\r\n          parse(value) {\r\n            return value || \"\"\r\n          },\r\n        },\r\n        {\r\n          label: \"Link\",\r\n          name: \"link\",\r\n          component: \"text\",\r\n          parse(value) {\r\n            return value || \"\"\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n}\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\nimport { useLocalJsonForm } from \"gatsby-tinacms-json\"\r\n\r\nimport {\r\n  Paper,\r\n  Meta,\r\n  MetaSpan,\r\n  MetaActions,\r\n  DraftBadge,\r\n} from \"../components/style\"\r\nimport { ListAuthors, AuthorsForm } from \"../components/authors\"\r\nimport { Link } from \"gatsby\"\r\nimport { PageLayout } from \"../components/pageLayout\"\r\n\r\nexport default function List({ data, pageContext }) {\r\n  const [page] = useLocalJsonForm(data.page, ListForm)\r\n  const [authors] = useLocalJsonForm(data.authors, AuthorsForm)\r\n\r\n  const { slug, limit, skip, numPages, currentPage } = pageContext\r\n  const isFirst = currentPage === 1\r\n  const isLast = currentPage === numPages\r\n  const prevPage =\r\n    currentPage - 1 === 1 ? slug : slug + \"/\" + (currentPage - 1).toString()\r\n  const nextPage = slug + \"/\" + (currentPage + 1).toString()\r\n  page.title = isFirst ? page.title : page.title + \" - \" + currentPage\r\n\r\n  return (\r\n    <PageLayout page={page}>\r\n      <>\r\n        {data.posts &&\r\n          data.posts.edges.map((item) => {\r\n            return (\r\n              <Paper article key={item.node.id}>\r\n                {item.node.frontmatter.draft && <DraftBadge>Draft</DraftBadge>}\r\n                <h2>\r\n                  <Link to={item.node.frontmatter.path}>\r\n                    {item.node.frontmatter.title}\r\n                  </Link>\r\n                </h2>\r\n                <p>{item.node.excerpt}</p>\r\n                <Meta>\r\n                  <MetaSpan>{item.node.frontmatter.date}</MetaSpan>\r\n                  {item.node.frontmatter.authors && (\r\n                    <MetaSpan>\r\n                      <em>By</em>&nbsp;\r\n                      <ListAuthors authorIDs={item.node.frontmatter.authors} />\r\n                    </MetaSpan>\r\n                  )}\r\n                  <MetaActions>\r\n                    <Link to={item.node.frontmatter.path}>Read Article →</Link>\r\n                  </MetaActions>\r\n                </Meta>\r\n              </Paper>\r\n            )\r\n          })}\r\n        <ListNav>\r\n          {!isFirst && (\r\n            <Link to={prevPage} rel=\"prev\">\r\n              ← Newer\r\n            </Link>\r\n          )}\r\n          {!isLast && (\r\n            <Link to={nextPage} rel=\"next\">\r\n              Older →\r\n            </Link>\r\n          )}\r\n        </ListNav>\r\n      </>\r\n    </PageLayout>\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query($listType: String!, $slug: String!, $skip: Int!, $limit: Int!) {\r\n    page: pagesJson(path: { eq: $slug }) {\r\n      path\r\n      title\r\n      hero {\r\n        headline\r\n        textline\r\n        large\r\n        overlay\r\n        ctas {\r\n          label\r\n          link\r\n          primary\r\n          arrow\r\n        }\r\n        image {\r\n          childImageSharp {\r\n            fluid(quality: 70, maxWidth: 1920) {\r\n              ...GatsbyImageSharpFluid_withWebp\r\n            }\r\n          }\r\n        }\r\n      }\r\n      listType\r\n      rawJson\r\n      fileRelativePath\r\n    }\r\n    posts: allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date] }\r\n      filter: {\r\n        frontmatter: { type: { eq: $listType } }\r\n        published: { eq: true }\r\n      }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            path\r\n            title\r\n            draft\r\n            authors\r\n          }\r\n        }\r\n      }\r\n    }\r\n    authors: settingsJson(\r\n      fileRelativePath: { eq: \"/content/settings/authors.json\" }\r\n    ) {\r\n      ...authors\r\n\r\n      rawJson\r\n      fileRelativePath\r\n    }\r\n  }\r\n`\r\n\r\nexport const ListNav = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n\r\n  a {\r\n    display: inline-block;\r\n    padding: 0.5rem 1rem;\r\n  }\r\n`\r\n\r\nconst ListForm = {\r\n  label: \"Page\",\r\n  fields: [\r\n    {\r\n      label: \"Title\",\r\n      name: \"rawJson.title\",\r\n      component: \"text\",\r\n    },\r\n    {\r\n      label: \"Hero\",\r\n      name: \"rawJson.hero\",\r\n      component: \"group\",\r\n      fields: [\r\n        {\r\n          label: \"Headline\",\r\n          name: \"headline\",\r\n          component: \"text\",\r\n        },\r\n        {\r\n          label: \"Textline\",\r\n          name: \"textline\",\r\n          component: \"text\",\r\n        },\r\n        {\r\n          label: \"Image\",\r\n          name: \"image\",\r\n          component: \"image\",\r\n          parse: (filename) => `../images/${filename}`,\r\n          uploadDir: () => `/content/images/`,\r\n          previewSrc: (formValues) => {\r\n            if (!formValues.jsonNode.hero || !formValues.jsonNode.hero.image)\r\n              return \"\"\r\n            return formValues.jsonNode.hero.image.childImageSharp.fluid.src\r\n          },\r\n        },\r\n        {\r\n          label: \"Actions\",\r\n          name: \"ctas\",\r\n          component: \"group-list\",\r\n          itemProps: (item) => ({\r\n            key: item.link,\r\n            label: item.label,\r\n          }),\r\n          fields: [\r\n            {\r\n              label: \"Label\",\r\n              name: \"label\",\r\n              component: \"text\",\r\n            },\r\n            {\r\n              label: \"Link\",\r\n              name: \"link\",\r\n              component: \"text\",\r\n            },\r\n            {\r\n              label: \"Primary\",\r\n              name: \"primary\",\r\n              component: \"toggle\",\r\n            },\r\n            {\r\n              label: \"Arrow\",\r\n              name: \"arrow\",\r\n              component: \"toggle\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          label: \"Large\",\r\n          name: \"large\",\r\n          component: \"toggle\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n}\r\n"],"sourceRoot":""}